#!/bin/bash

INVERT="\u001b[7m"
RESET="\u001b[0m"

ask() {
    # https://djm.me/ask
    local prompt default reply

    if [ "${2:-}" = "Y" ]; then
        prompt="Y/n"
        default=Y
    elif [ "${2:-}" = "N" ]; then
        prompt="y/N"
        default=N
    else
        prompt="y/n"
        default=
    fi

    while true; do

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "$1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read reply </dev/tty

        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
        Y* | y*) return 0 ;;
        N* | n*) return 1 ;;
        esac

    done
}

_set_fzf_default_opts() {
    local info="<ESC> Exit, <PgUp> Preview up, <PgDown> Preview down"

    export FZF_DEFAULT_OPTS="
      -m --cycle --border --layout=reverse-list --prompt='Pending Repositories. Press <ENTER> to continue...' --preview-window=right:wrap --bind pgdn:preview-down --bind pgup:preview-up --header \"$info\""
}

sync_dirs() {
    local dirs=$1
    MSG="Update - $(date)"
    ORG=$PWD
    for d in $dirs; do
        if [ -d "$d/.git" ]; then
            cd "$d" || exit 1
            printf "\n\nSynchronizing %s...\n" "$d"
            git add -A && git commit -am "$MSG" && git pull && git push
            cd "$ORG" || exit 1
        fi
    done
}

RESULTS=$(
    start=$PWD
    for d in */; do
        if [ -d "$d/.git" ]; then
            cd "$d" || continue
            test -n "$(git status --porcelain=v1)" && printf "%s\n" "$d"
            cd "$start" || exit
        fi
    done
)
_set_fzf_default_opts

selection=$(echo "$RESULTS" | fzf --preview="cd {}; printf '$INVERT'; printf 'Status$RESET\n\n'; git status -vv --column=never --renames --find-renames; printf '$INVERT'; printf 'Remote endpoints$RESET\n\n'; git remote -v")
selection=${selection}
sync_dirs "$selection"
